// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/store.go
//
// Generated by this command:
//
//	mockgen -source=db/sqlc/store.go -destination=db/mock/store_mock.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/Streamfair/streamfair_token_svc/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockStore) CreateRefreshToken(ctx context.Context, arg db.CreateRefreshTokenParams) (db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, arg)
	ret0, _ := ret[0].(db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockStoreMockRecorder) CreateRefreshToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockStore)(nil).CreateRefreshToken), ctx, arg)
}

// CreateToken mocks base method.
func (m *MockStore) CreateToken(ctx context.Context, arg db.CreateTokenParams) (db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, arg)
	ret0, _ := ret[0].(db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockStoreMockRecorder) CreateToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockStore)(nil).CreateToken), ctx, arg)
}

// DeleteRefreshTokenById mocks base method.
func (m *MockStore) DeleteRefreshTokenById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenById indicates an expected call of DeleteRefreshTokenById.
func (mr *MockStoreMockRecorder) DeleteRefreshTokenById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenById", reflect.TypeOf((*MockStore)(nil).DeleteRefreshTokenById), ctx, id)
}

// DeleteRefreshTokenByValue mocks base method.
func (m *MockStore) DeleteRefreshTokenByValue(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenByValue", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenByValue indicates an expected call of DeleteRefreshTokenByValue.
func (mr *MockStoreMockRecorder) DeleteRefreshTokenByValue(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenByValue", reflect.TypeOf((*MockStore)(nil).DeleteRefreshTokenByValue), ctx, token)
}

// DeleteTokenById mocks base method.
func (m *MockStore) DeleteTokenById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTokenById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTokenById indicates an expected call of DeleteTokenById.
func (mr *MockStoreMockRecorder) DeleteTokenById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokenById", reflect.TypeOf((*MockStore)(nil).DeleteTokenById), ctx, id)
}

// DeleteTokenByValue mocks base method.
func (m *MockStore) DeleteTokenByValue(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTokenByValue", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTokenByValue indicates an expected call of DeleteTokenByValue.
func (mr *MockStoreMockRecorder) DeleteTokenByValue(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokenByValue", reflect.TypeOf((*MockStore)(nil).DeleteTokenByValue), ctx, token)
}

// GetRefreshTokenById mocks base method.
func (m *MockStore) GetRefreshTokenById(ctx context.Context, id int64) (db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenById", ctx, id)
	ret0, _ := ret[0].(db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenById indicates an expected call of GetRefreshTokenById.
func (mr *MockStoreMockRecorder) GetRefreshTokenById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenById", reflect.TypeOf((*MockStore)(nil).GetRefreshTokenById), ctx, id)
}

// GetRefreshTokenByValue mocks base method.
func (m *MockStore) GetRefreshTokenByValue(ctx context.Context, token string) (db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenByValue", ctx, token)
	ret0, _ := ret[0].(db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenByValue indicates an expected call of GetRefreshTokenByValue.
func (mr *MockStoreMockRecorder) GetRefreshTokenByValue(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenByValue", reflect.TypeOf((*MockStore)(nil).GetRefreshTokenByValue), ctx, token)
}

// GetTokenById mocks base method.
func (m *MockStore) GetTokenById(ctx context.Context, id int64) (db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenById", ctx, id)
	ret0, _ := ret[0].(db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenById indicates an expected call of GetTokenById.
func (mr *MockStoreMockRecorder) GetTokenById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenById", reflect.TypeOf((*MockStore)(nil).GetTokenById), ctx, id)
}

// GetTokenByValue mocks base method.
func (m *MockStore) GetTokenByValue(ctx context.Context, token string) (db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByValue", ctx, token)
	ret0, _ := ret[0].(db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByValue indicates an expected call of GetTokenByValue.
func (mr *MockStoreMockRecorder) GetTokenByValue(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByValue", reflect.TypeOf((*MockStore)(nil).GetTokenByValue), ctx, token)
}

// ListRefreshTokens mocks base method.
func (m *MockStore) ListRefreshTokens(ctx context.Context, arg db.ListRefreshTokensParams) ([]db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRefreshTokens", ctx, arg)
	ret0, _ := ret[0].([]db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRefreshTokens indicates an expected call of ListRefreshTokens.
func (mr *MockStoreMockRecorder) ListRefreshTokens(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRefreshTokens", reflect.TypeOf((*MockStore)(nil).ListRefreshTokens), ctx, arg)
}

// ListRevokedRefreshTokens mocks base method.
func (m *MockStore) ListRevokedRefreshTokens(ctx context.Context, arg db.ListRevokedRefreshTokensParams) ([]db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevokedRefreshTokens", ctx, arg)
	ret0, _ := ret[0].([]db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevokedRefreshTokens indicates an expected call of ListRevokedRefreshTokens.
func (mr *MockStoreMockRecorder) ListRevokedRefreshTokens(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevokedRefreshTokens", reflect.TypeOf((*MockStore)(nil).ListRevokedRefreshTokens), ctx, arg)
}

// ListRevokedTokens mocks base method.
func (m *MockStore) ListRevokedTokens(ctx context.Context, arg db.ListRevokedTokensParams) ([]db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevokedTokens", ctx, arg)
	ret0, _ := ret[0].([]db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevokedTokens indicates an expected call of ListRevokedTokens.
func (mr *MockStoreMockRecorder) ListRevokedTokens(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevokedTokens", reflect.TypeOf((*MockStore)(nil).ListRevokedTokens), ctx, arg)
}

// ListTokens mocks base method.
func (m *MockStore) ListTokens(ctx context.Context, arg db.ListTokensParams) ([]db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", ctx, arg)
	ret0, _ := ret[0].([]db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockStoreMockRecorder) ListTokens(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockStore)(nil).ListTokens), ctx, arg)
}

// Ping mocks base method.
func (m *MockStore) Ping(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping), ctx, timeout)
}

// RevokeRefreshTokenById mocks base method.
func (m *MockStore) RevokeRefreshTokenById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshTokenById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshTokenById indicates an expected call of RevokeRefreshTokenById.
func (mr *MockStoreMockRecorder) RevokeRefreshTokenById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshTokenById", reflect.TypeOf((*MockStore)(nil).RevokeRefreshTokenById), ctx, id)
}

// RevokeRefreshTokenByValue mocks base method.
func (m *MockStore) RevokeRefreshTokenByValue(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshTokenByValue", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshTokenByValue indicates an expected call of RevokeRefreshTokenByValue.
func (mr *MockStoreMockRecorder) RevokeRefreshTokenByValue(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshTokenByValue", reflect.TypeOf((*MockStore)(nil).RevokeRefreshTokenByValue), ctx, token)
}

// RevokeTokenById mocks base method.
func (m *MockStore) RevokeTokenById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokenById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokenById indicates an expected call of RevokeTokenById.
func (mr *MockStoreMockRecorder) RevokeTokenById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokenById", reflect.TypeOf((*MockStore)(nil).RevokeTokenById), ctx, id)
}

// RevokeTokenByValue mocks base method.
func (m *MockStore) RevokeTokenByValue(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokenByValue", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokenByValue indicates an expected call of RevokeTokenByValue.
func (mr *MockStoreMockRecorder) RevokeTokenByValue(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokenByValue", reflect.TypeOf((*MockStore)(nil).RevokeTokenByValue), ctx, token)
}

// UpdateRefreshToken mocks base method.
func (m *MockStore) UpdateRefreshToken(ctx context.Context, arg db.UpdateRefreshTokenParams) (db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", ctx, arg)
	ret0, _ := ret[0].(db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockStoreMockRecorder) UpdateRefreshToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockStore)(nil).UpdateRefreshToken), ctx, arg)
}

// UpdateToken mocks base method.
func (m *MockStore) UpdateToken(ctx context.Context, id int64) (db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, id)
	ret0, _ := ret[0].(db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockStoreMockRecorder) UpdateToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockStore)(nil).UpdateToken), ctx, id)
}

// VerifyRefreshToken mocks base method.
func (m *MockStore) VerifyRefreshToken(ctx context.Context, token string) (db.TokenSvcRefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", ctx, token)
	ret0, _ := ret[0].(db.TokenSvcRefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockStoreMockRecorder) VerifyRefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockStore)(nil).VerifyRefreshToken), ctx, token)
}

// VerifyToken mocks base method.
func (m *MockStore) VerifyToken(ctx context.Context, token string) (db.TokenSvcToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(db.TokenSvcToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockStoreMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockStore)(nil).VerifyToken), ctx, token)
}
