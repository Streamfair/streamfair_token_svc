// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: token.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO "token_svc"."Tokens" (
    user_id,
    token,
    expires_at,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
) RETURNING id, user_id, token, revoked, expires_at, created_at, updated_at
`

type CreateTokenParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (TokenSvcToken, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i TokenSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Revoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTokenById = `-- name: DeleteTokenById :exec
DELETE FROM "token_svc"."Tokens" WHERE id = $1
`

func (q *Queries) DeleteTokenById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTokenById, id)
	return err
}

const deleteTokenByValue = `-- name: DeleteTokenByValue :exec
DELETE FROM "token_svc"."Tokens" WHERE token = $1
`

func (q *Queries) DeleteTokenByValue(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteTokenByValue, token)
	return err
}

const getTokenById = `-- name: GetTokenById :one
SELECT id, user_id, token, revoked, expires_at, created_at, updated_at FROM "token_svc"."Tokens" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTokenById(ctx context.Context, id int64) (TokenSvcToken, error) {
	row := q.db.QueryRow(ctx, getTokenById, id)
	var i TokenSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Revoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenByValue = `-- name: GetTokenByValue :one
SELECT id, user_id, token, revoked, expires_at, created_at, updated_at FROM "token_svc"."Tokens" WHERE token = $1 LIMIT 1
`

func (q *Queries) GetTokenByValue(ctx context.Context, token string) (TokenSvcToken, error) {
	row := q.db.QueryRow(ctx, getTokenByValue, token)
	var i TokenSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Revoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRevokedTokens = `-- name: ListRevokedTokens :many
SELECT id, user_id, token, revoked, expires_at, created_at, updated_at
FROM "token_svc"."Tokens"
WHERE revoked = true ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListRevokedTokensParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRevokedTokens(ctx context.Context, arg ListRevokedTokensParams) ([]TokenSvcToken, error) {
	rows, err := q.db.Query(ctx, listRevokedTokens, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TokenSvcToken{}
	for rows.Next() {
		var i TokenSvcToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Revoked,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokens = `-- name: ListTokens :many
SELECT id, user_id, token, revoked, expires_at, created_at, updated_at FROM "token_svc"."Tokens" ORDER BY id LIMIT $1 OFFSET $2
`

type ListTokensParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTokens(ctx context.Context, arg ListTokensParams) ([]TokenSvcToken, error) {
	rows, err := q.db.Query(ctx, listTokens, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TokenSvcToken{}
	for rows.Next() {
		var i TokenSvcToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Revoked,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeTokenById = `-- name: RevokeTokenById :exec
UPDATE "token_svc"."Tokens" SET revoked = true WHERE id = $1
`

func (q *Queries) RevokeTokenById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, revokeTokenById, id)
	return err
}

const revokeTokenByValue = `-- name: RevokeTokenByValue :exec
UPDATE "token_svc"."Tokens" SET revoked = true WHERE token = $1
`

func (q *Queries) RevokeTokenByValue(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, revokeTokenByValue, token)
	return err
}

const updateToken = `-- name: UpdateToken :one
UPDATE "token_svc"."Tokens" 
SET
    updated_at = now()
WHERE id = $1 RETURNING id, user_id, token, revoked, expires_at, created_at, updated_at
`

func (q *Queries) UpdateToken(ctx context.Context, id int64) (TokenSvcToken, error) {
	row := q.db.QueryRow(ctx, updateToken, id)
	var i TokenSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Revoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyToken = `-- name: VerifyToken :one
SELECT id, user_id, token, revoked, expires_at, created_at, updated_at FROM "token_svc"."Tokens" WHERE token = $1
AND revoked = false AND expires_at > NOW() LIMIT 1
`

func (q *Queries) VerifyToken(ctx context.Context, token string) (TokenSvcToken, error) {
	row := q.db.QueryRow(ctx, verifyToken, token)
	var i TokenSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Revoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
