// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	refresh_token "github.com/Streamfair/streamfair_token_svc/pb/refresh_token"
	token "github.com/Streamfair/streamfair_token_svc/pb/token"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	// Tokens
	BlacklistToken(ctx context.Context, in *token.BlacklistTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateToken(ctx context.Context, in *token.CreateTokenRequest, opts ...grpc.CallOption) (*token.CreateTokenResponse, error)
	DeleteToken(ctx context.Context, in *token.DeleteTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRevokedTokens(ctx context.Context, in *token.GetRevokedTokensRequest, opts ...grpc.CallOption) (*token.GetRevokedTokensResponse, error)
	GetTokenByID(ctx context.Context, in *token.GetTokenByIDRequest, opts ...grpc.CallOption) (*token.GetTokenByIDResponse, error)
	GetTokenByValue(ctx context.Context, in *token.GetTokenByValueRequest, opts ...grpc.CallOption) (*token.GetTokenByValueResponse, error)
	ListTokens(ctx context.Context, in *token.ListTokensRequest, opts ...grpc.CallOption) (*token.ListTokensResponse, error)
	RevokeToken(ctx context.Context, in *token.RevokeTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateToken(ctx context.Context, in *token.UpdateTokenRequest, opts ...grpc.CallOption) (*token.UpdateTokenResponse, error)
	VerifyToken(ctx context.Context, in *token.VerifyTokenRequest, opts ...grpc.CallOption) (*token.VerifyTokenResponse, error)
	// Refresh tokens
	BlacklistRefreshToken(ctx context.Context, in *refresh_token.BlacklistRefreshTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRefreshToken(ctx context.Context, in *refresh_token.CreateRefreshTokenRequest, opts ...grpc.CallOption) (*refresh_token.CreateRefreshTokenResponse, error)
	DeleteRefreshToken(ctx context.Context, in *refresh_token.DeleteRefreshTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRefreshTokenByID(ctx context.Context, in *refresh_token.GetRefreshTokenByIDRequest, opts ...grpc.CallOption) (*refresh_token.GetRefreshTokenByIDResponse, error)
	GetRefreshTokenByValue(ctx context.Context, in *refresh_token.GetRefreshTokenByValueRequest, opts ...grpc.CallOption) (*refresh_token.GetRefreshTokenByValueResponse, error)
	GetRevokedRefreshTokens(ctx context.Context, in *refresh_token.GetRevokedRefreshTokensRequest, opts ...grpc.CallOption) (*refresh_token.GetRevokedRefreshTokensResponse, error)
	ListRefreshTokens(ctx context.Context, in *refresh_token.ListRefreshTokensRequest, opts ...grpc.CallOption) (*refresh_token.ListRefreshTokensResponse, error)
	RevokeRefreshToken(ctx context.Context, in *refresh_token.RevokeRefreshTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRefreshToken(ctx context.Context, in *refresh_token.UpdateRefreshTokenRequest, opts ...grpc.CallOption) (*refresh_token.UpdateRefreshTokenResponse, error)
	VerifyRefreshToken(ctx context.Context, in *refresh_token.VerifyRefreshTokenRequest, opts ...grpc.CallOption) (*refresh_token.VerifyRefreshTokenResponse, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) BlacklistToken(ctx context.Context, in *token.BlacklistTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TokenService/BlacklistToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) CreateToken(ctx context.Context, in *token.CreateTokenRequest, opts ...grpc.CallOption) (*token.CreateTokenResponse, error) {
	out := new(token.CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) DeleteToken(ctx context.Context, in *token.DeleteTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TokenService/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetRevokedTokens(ctx context.Context, in *token.GetRevokedTokensRequest, opts ...grpc.CallOption) (*token.GetRevokedTokensResponse, error) {
	out := new(token.GetRevokedTokensResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/GetRevokedTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetTokenByID(ctx context.Context, in *token.GetTokenByIDRequest, opts ...grpc.CallOption) (*token.GetTokenByIDResponse, error) {
	out := new(token.GetTokenByIDResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/GetTokenByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetTokenByValue(ctx context.Context, in *token.GetTokenByValueRequest, opts ...grpc.CallOption) (*token.GetTokenByValueResponse, error) {
	out := new(token.GetTokenByValueResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/GetTokenByValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) ListTokens(ctx context.Context, in *token.ListTokensRequest, opts ...grpc.CallOption) (*token.ListTokensResponse, error) {
	out := new(token.ListTokensResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/ListTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) RevokeToken(ctx context.Context, in *token.RevokeTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TokenService/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) UpdateToken(ctx context.Context, in *token.UpdateTokenRequest, opts ...grpc.CallOption) (*token.UpdateTokenResponse, error) {
	out := new(token.UpdateTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) VerifyToken(ctx context.Context, in *token.VerifyTokenRequest, opts ...grpc.CallOption) (*token.VerifyTokenResponse, error) {
	out := new(token.VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) BlacklistRefreshToken(ctx context.Context, in *refresh_token.BlacklistRefreshTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TokenService/BlacklistRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) CreateRefreshToken(ctx context.Context, in *refresh_token.CreateRefreshTokenRequest, opts ...grpc.CallOption) (*refresh_token.CreateRefreshTokenResponse, error) {
	out := new(refresh_token.CreateRefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/CreateRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) DeleteRefreshToken(ctx context.Context, in *refresh_token.DeleteRefreshTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TokenService/DeleteRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetRefreshTokenByID(ctx context.Context, in *refresh_token.GetRefreshTokenByIDRequest, opts ...grpc.CallOption) (*refresh_token.GetRefreshTokenByIDResponse, error) {
	out := new(refresh_token.GetRefreshTokenByIDResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/GetRefreshTokenByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetRefreshTokenByValue(ctx context.Context, in *refresh_token.GetRefreshTokenByValueRequest, opts ...grpc.CallOption) (*refresh_token.GetRefreshTokenByValueResponse, error) {
	out := new(refresh_token.GetRefreshTokenByValueResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/GetRefreshTokenByValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) GetRevokedRefreshTokens(ctx context.Context, in *refresh_token.GetRevokedRefreshTokensRequest, opts ...grpc.CallOption) (*refresh_token.GetRevokedRefreshTokensResponse, error) {
	out := new(refresh_token.GetRevokedRefreshTokensResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/GetRevokedRefreshTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) ListRefreshTokens(ctx context.Context, in *refresh_token.ListRefreshTokensRequest, opts ...grpc.CallOption) (*refresh_token.ListRefreshTokensResponse, error) {
	out := new(refresh_token.ListRefreshTokensResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/ListRefreshTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) RevokeRefreshToken(ctx context.Context, in *refresh_token.RevokeRefreshTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TokenService/RevokeRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) UpdateRefreshToken(ctx context.Context, in *refresh_token.UpdateRefreshTokenRequest, opts ...grpc.CallOption) (*refresh_token.UpdateRefreshTokenResponse, error) {
	out := new(refresh_token.UpdateRefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/UpdateRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) VerifyRefreshToken(ctx context.Context, in *refresh_token.VerifyRefreshTokenRequest, opts ...grpc.CallOption) (*refresh_token.VerifyRefreshTokenResponse, error) {
	out := new(refresh_token.VerifyRefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.TokenService/VerifyRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	// Tokens
	BlacklistToken(context.Context, *token.BlacklistTokenRequest) (*emptypb.Empty, error)
	CreateToken(context.Context, *token.CreateTokenRequest) (*token.CreateTokenResponse, error)
	DeleteToken(context.Context, *token.DeleteTokenRequest) (*emptypb.Empty, error)
	GetRevokedTokens(context.Context, *token.GetRevokedTokensRequest) (*token.GetRevokedTokensResponse, error)
	GetTokenByID(context.Context, *token.GetTokenByIDRequest) (*token.GetTokenByIDResponse, error)
	GetTokenByValue(context.Context, *token.GetTokenByValueRequest) (*token.GetTokenByValueResponse, error)
	ListTokens(context.Context, *token.ListTokensRequest) (*token.ListTokensResponse, error)
	RevokeToken(context.Context, *token.RevokeTokenRequest) (*emptypb.Empty, error)
	UpdateToken(context.Context, *token.UpdateTokenRequest) (*token.UpdateTokenResponse, error)
	VerifyToken(context.Context, *token.VerifyTokenRequest) (*token.VerifyTokenResponse, error)
	// Refresh tokens
	BlacklistRefreshToken(context.Context, *refresh_token.BlacklistRefreshTokenRequest) (*emptypb.Empty, error)
	CreateRefreshToken(context.Context, *refresh_token.CreateRefreshTokenRequest) (*refresh_token.CreateRefreshTokenResponse, error)
	DeleteRefreshToken(context.Context, *refresh_token.DeleteRefreshTokenRequest) (*emptypb.Empty, error)
	GetRefreshTokenByID(context.Context, *refresh_token.GetRefreshTokenByIDRequest) (*refresh_token.GetRefreshTokenByIDResponse, error)
	GetRefreshTokenByValue(context.Context, *refresh_token.GetRefreshTokenByValueRequest) (*refresh_token.GetRefreshTokenByValueResponse, error)
	GetRevokedRefreshTokens(context.Context, *refresh_token.GetRevokedRefreshTokensRequest) (*refresh_token.GetRevokedRefreshTokensResponse, error)
	ListRefreshTokens(context.Context, *refresh_token.ListRefreshTokensRequest) (*refresh_token.ListRefreshTokensResponse, error)
	RevokeRefreshToken(context.Context, *refresh_token.RevokeRefreshTokenRequest) (*emptypb.Empty, error)
	UpdateRefreshToken(context.Context, *refresh_token.UpdateRefreshTokenRequest) (*refresh_token.UpdateRefreshTokenResponse, error)
	VerifyRefreshToken(context.Context, *refresh_token.VerifyRefreshTokenRequest) (*refresh_token.VerifyRefreshTokenResponse, error)
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) BlacklistToken(context.Context, *token.BlacklistTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistToken not implemented")
}
func (UnimplementedTokenServiceServer) CreateToken(context.Context, *token.CreateTokenRequest) (*token.CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedTokenServiceServer) DeleteToken(context.Context, *token.DeleteTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedTokenServiceServer) GetRevokedTokens(context.Context, *token.GetRevokedTokensRequest) (*token.GetRevokedTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevokedTokens not implemented")
}
func (UnimplementedTokenServiceServer) GetTokenByID(context.Context, *token.GetTokenByIDRequest) (*token.GetTokenByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenByID not implemented")
}
func (UnimplementedTokenServiceServer) GetTokenByValue(context.Context, *token.GetTokenByValueRequest) (*token.GetTokenByValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenByValue not implemented")
}
func (UnimplementedTokenServiceServer) ListTokens(context.Context, *token.ListTokensRequest) (*token.ListTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (UnimplementedTokenServiceServer) RevokeToken(context.Context, *token.RevokeTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedTokenServiceServer) UpdateToken(context.Context, *token.UpdateTokenRequest) (*token.UpdateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedTokenServiceServer) VerifyToken(context.Context, *token.VerifyTokenRequest) (*token.VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedTokenServiceServer) BlacklistRefreshToken(context.Context, *refresh_token.BlacklistRefreshTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) CreateRefreshToken(context.Context, *refresh_token.CreateRefreshTokenRequest) (*refresh_token.CreateRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) DeleteRefreshToken(context.Context, *refresh_token.DeleteRefreshTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) GetRefreshTokenByID(context.Context, *refresh_token.GetRefreshTokenByIDRequest) (*refresh_token.GetRefreshTokenByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefreshTokenByID not implemented")
}
func (UnimplementedTokenServiceServer) GetRefreshTokenByValue(context.Context, *refresh_token.GetRefreshTokenByValueRequest) (*refresh_token.GetRefreshTokenByValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefreshTokenByValue not implemented")
}
func (UnimplementedTokenServiceServer) GetRevokedRefreshTokens(context.Context, *refresh_token.GetRevokedRefreshTokensRequest) (*refresh_token.GetRevokedRefreshTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevokedRefreshTokens not implemented")
}
func (UnimplementedTokenServiceServer) ListRefreshTokens(context.Context, *refresh_token.ListRefreshTokensRequest) (*refresh_token.ListRefreshTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefreshTokens not implemented")
}
func (UnimplementedTokenServiceServer) RevokeRefreshToken(context.Context, *refresh_token.RevokeRefreshTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) UpdateRefreshToken(context.Context, *refresh_token.UpdateRefreshTokenRequest) (*refresh_token.UpdateRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) VerifyRefreshToken(context.Context, *refresh_token.VerifyRefreshTokenRequest) (*refresh_token.VerifyRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRefreshToken not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_BlacklistToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.BlacklistTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).BlacklistToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/BlacklistToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).BlacklistToken(ctx, req.(*token.BlacklistTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).CreateToken(ctx, req.(*token.CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).DeleteToken(ctx, req.(*token.DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetRevokedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.GetRevokedTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetRevokedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/GetRevokedTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetRevokedTokens(ctx, req.(*token.GetRevokedTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetTokenByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.GetTokenByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetTokenByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/GetTokenByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetTokenByID(ctx, req.(*token.GetTokenByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetTokenByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.GetTokenByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetTokenByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/GetTokenByValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetTokenByValue(ctx, req.(*token.GetTokenByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).ListTokens(ctx, req.(*token.ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RevokeToken(ctx, req.(*token.RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).UpdateToken(ctx, req.(*token.UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(token.VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).VerifyToken(ctx, req.(*token.VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_BlacklistRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.BlacklistRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).BlacklistRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/BlacklistRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).BlacklistRefreshToken(ctx, req.(*refresh_token.BlacklistRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_CreateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.CreateRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).CreateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/CreateRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).CreateRefreshToken(ctx, req.(*refresh_token.CreateRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_DeleteRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.DeleteRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).DeleteRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/DeleteRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).DeleteRefreshToken(ctx, req.(*refresh_token.DeleteRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetRefreshTokenByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.GetRefreshTokenByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetRefreshTokenByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/GetRefreshTokenByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetRefreshTokenByID(ctx, req.(*refresh_token.GetRefreshTokenByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetRefreshTokenByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.GetRefreshTokenByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetRefreshTokenByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/GetRefreshTokenByValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetRefreshTokenByValue(ctx, req.(*refresh_token.GetRefreshTokenByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_GetRevokedRefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.GetRevokedRefreshTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetRevokedRefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/GetRevokedRefreshTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetRevokedRefreshTokens(ctx, req.(*refresh_token.GetRevokedRefreshTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_ListRefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.ListRefreshTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).ListRefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/ListRefreshTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).ListRefreshTokens(ctx, req.(*refresh_token.ListRefreshTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_RevokeRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.RevokeRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RevokeRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/RevokeRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RevokeRefreshToken(ctx, req.(*refresh_token.RevokeRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_UpdateRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.UpdateRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).UpdateRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/UpdateRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).UpdateRefreshToken(ctx, req.(*refresh_token.UpdateRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_VerifyRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(refresh_token.VerifyRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).VerifyRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/VerifyRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).VerifyRefreshToken(ctx, req.(*refresh_token.VerifyRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlacklistToken",
			Handler:    _TokenService_BlacklistToken_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _TokenService_CreateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _TokenService_DeleteToken_Handler,
		},
		{
			MethodName: "GetRevokedTokens",
			Handler:    _TokenService_GetRevokedTokens_Handler,
		},
		{
			MethodName: "GetTokenByID",
			Handler:    _TokenService_GetTokenByID_Handler,
		},
		{
			MethodName: "GetTokenByValue",
			Handler:    _TokenService_GetTokenByValue_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _TokenService_ListTokens_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _TokenService_RevokeToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _TokenService_UpdateToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _TokenService_VerifyToken_Handler,
		},
		{
			MethodName: "BlacklistRefreshToken",
			Handler:    _TokenService_BlacklistRefreshToken_Handler,
		},
		{
			MethodName: "CreateRefreshToken",
			Handler:    _TokenService_CreateRefreshToken_Handler,
		},
		{
			MethodName: "DeleteRefreshToken",
			Handler:    _TokenService_DeleteRefreshToken_Handler,
		},
		{
			MethodName: "GetRefreshTokenByID",
			Handler:    _TokenService_GetRefreshTokenByID_Handler,
		},
		{
			MethodName: "GetRefreshTokenByValue",
			Handler:    _TokenService_GetRefreshTokenByValue_Handler,
		},
		{
			MethodName: "GetRevokedRefreshTokens",
			Handler:    _TokenService_GetRevokedRefreshTokens_Handler,
		},
		{
			MethodName: "ListRefreshTokens",
			Handler:    _TokenService_ListRefreshTokens_Handler,
		},
		{
			MethodName: "RevokeRefreshToken",
			Handler:    _TokenService_RevokeRefreshToken_Handler,
		},
		{
			MethodName: "UpdateRefreshToken",
			Handler:    _TokenService_UpdateRefreshToken_Handler,
		},
		{
			MethodName: "VerifyRefreshToken",
			Handler:    _TokenService_VerifyRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_svc.proto",
}
