version: "3.9"
services:
  db:
    image: postgres:16-alpine
    container_name: streamfair_token_service_db
    environment:
      CONTAINER_ENV: true
    env_file:
      - env/db.env
    ports:
      - "5434:5432"
    networks:
      - db_access_network
    healthcheck:
      test:         [ "CMD", "/usr/local/bin/pg_isready", "-h", "db" ]
      start_period:  1s
      interval:     1s
      timeout:      1s
      retries:      30

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamfair_token_service
    environment:
      CONTAINER_ENV: true
    env_file:
      - env/app.env
    ports:
      - "9390:9092"
      - "8380:8082"
    networks:
      - streamfair_internal_network
      - db_access_network
    depends_on:
      db:
        condition: service_healthy
    entrypoint: [ "/streamfair_token_svc/sh/wait-for.sh", "db:5432", "--", "/streamfair_token_svc/sh/start.sh" ]
    command: [ "/streamfair_token_svc/token_svc" ]
    healthcheck:
      test: ["CMD", "curl", "--fail", "-s", "-k", "https://streamfair_token_service:8082/streamfair/v1/healthz"]
      interval:     1s
      timeout:      1s
      retries:      30
      start_period: 5s
    volumes:
      - ./ssl:/streamfair_token_svc/ssl:ro

  # a dummy service which blocks "docker compose up -d" from returning until all services are up & healthy
  app-healthy:
    image: alpine:latest
    container_name: service_status
    command: [ "echo", "all services are up & healthy" ]
    depends_on:
      api:
        condition: service_healthy

networks:
  db_access_network:
    driver: bridge
  streamfair_internal_network:
    driver: bridge